name: Build and Test

on:
  push:
    branches:
      - development

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        dotnet-version: ['7.0.406']
        node-version: ['21.5']

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        dotnet build
        cd ./client
        npm install --legacy-peer-deps

    - name: Start Server
      run: |
        dotnet watch -p ./API &
        sleep 5

    - name: Wait for Server to Start
      run: |
        # Wait until the server is listening on port 5000
        while ! nc -z localhost 5000; do sleep 1; done

    - name: Check Server Status
      run: |
        # Determine the operating system
        if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
          # If the operating system is Linux or macOS
          # Run the curl command for Linux and macOS
          response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # If the operating system is Windows
          # Run the curl command for Windows
          response_code=$(curl -s -o NUL -w "%{http_code}" http://localhost:5000)
        else
          echo "Unsupported operating system"
          exit 1
        fi

        # Check the response code
        if [ "$response_code" == "200" ]; then
          echo "Server is running successfully"
          # Stop the server gracefully
          pkill -f "dotnet watch"
        else
          echo "Server failed to start or is not responding"
          exit 1
        fi
