name: Build and Test

on:
  push:
    branches:
      - development

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        dotnet-version: ['7.0.406']
        node-version: ['21.5']

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        dotnet build
        cd ./client
        npm install --legacy-peer-deps

    - name: Start Server
      run: |
        dotnet watch --project ./API &
        sleep 5
        
    - name: Check if dotnet watch is running (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        tasklist | findstr /C:"dotnet.exe" > nul
        if (ERRORLEVEL NEQ 0){
          echo "dotnet watch is not running"
          exit 1
        } else {
          echo "dotnet watch is running"
        }

    - name: Check if dotnet watch is running (Linux & MacOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: |
        if pgrep -x "dotnet" > /dev/null; then
          echo "dotnet watch is running"
        else
          echo "dotnet watch is not running"
          exit 1
        fi

        
    - name: Start npm server
      run: |
        cd ./client
        ls
        npm start &
      
      # run: |
      #   while ! nc -z localhost 5000; do sleep 1; done
      #   echo "good"
      #   if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
      #     response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
      #     echo "$response_code"
      #   elif [ "$RUNNER_OS" == "Windows" ]; then
      #     response_code=$(curl -s -o NUL -w "%{http_code}" http://localhost:5000)
      #     echo "$response_code"
      #   else
      #     echo "Unsupported operating system"
      #     exit 1
      #   fi

    #     # Check the response code
    #     if [ "$response_code" == "200" ]; then
    #       echo "Server is running successfully"
    #       pkill -f "dotnet watch"
    #     else
    #       echo "Server failed to start or is not responding"
    #       exit 1
    #     fi
        

    # - name: Check Server Status
    #   run: |
    #     if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
    #       response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
    #       echo "$response_code"
    #     elif [ "$RUNNER_OS" == "Windows" ]; then
    #       response_code=$(curl -s -o NUL -w "%{http_code}" http://localhost:5000)
    #       echo "$response_code"
    #     else
    #       echo "Unsupported operating system"
    #       exit 1
    #     fi

    #     # Check the response code
    #     if [ "$response_code" == "200" ]; then
    #       echo "Server is running successfully"
    #       pkill -f "dotnet watch"
    #     else
    #       echo "Server failed to start or is not responding"
    #       exit 1
    #     fi
